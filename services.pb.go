// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: catalog/services.proto

package grpc_catalog_go

import (
	context "context"
	grpc_catalog_common_go "github.com/napptive/grpc-catalog-common-go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_catalog_services_proto protoreflect.FileDescriptor

var file_catalog_services_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x1a, 0x16, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xd1,
	0x01, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x5f, 0x0a, 0x03, 0x41, 0x64,
	0x64, 0x12, 0x1e, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x28, 0x01, 0x12, 0x65, 0x0a, 0x08, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x01, 0x2a,
	0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x61, 0x70, 0x70, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x67, 0x6f, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_catalog_services_proto_goTypes = []interface{}{
	(*AddApplicationRequest)(nil),             // 0: catalog.AddApplicationRequest
	(*DownloadApplicationRequest)(nil),        // 1: catalog.DownloadApplicationRequest
	(*grpc_catalog_common_go.OpResponse)(nil), // 2: catalog_common.OpResponse
	(*FileInfo)(nil),                          // 3: catalog.FileInfo
}
var file_catalog_services_proto_depIdxs = []int32{
	0, // 0: catalog.Catalog.Add:input_type -> catalog.AddApplicationRequest
	1, // 1: catalog.Catalog.Download:input_type -> catalog.DownloadApplicationRequest
	2, // 2: catalog.Catalog.Add:output_type -> catalog_common.OpResponse
	3, // 3: catalog.Catalog.Download:output_type -> catalog.FileInfo
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_catalog_services_proto_init() }
func file_catalog_services_proto_init() {
	if File_catalog_services_proto != nil {
		return
	}
	file_catalog_entities_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_catalog_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_catalog_services_proto_goTypes,
		DependencyIndexes: file_catalog_services_proto_depIdxs,
	}.Build()
	File_catalog_services_proto = out.File
	file_catalog_services_proto_rawDesc = nil
	file_catalog_services_proto_goTypes = nil
	file_catalog_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatalogClient interface {
	// Add a new application in the catalog
	Add(ctx context.Context, opts ...grpc.CallOption) (Catalog_AddClient, error)
	// Download an application from catalog
	Download(ctx context.Context, in *DownloadApplicationRequest, opts ...grpc.CallOption) (Catalog_DownloadClient, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) Add(ctx context.Context, opts ...grpc.CallOption) (Catalog_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Catalog_serviceDesc.Streams[0], "/catalog.Catalog/Add", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogAddClient{stream}
	return x, nil
}

type Catalog_AddClient interface {
	Send(*AddApplicationRequest) error
	CloseAndRecv() (*grpc_catalog_common_go.OpResponse, error)
	grpc.ClientStream
}

type catalogAddClient struct {
	grpc.ClientStream
}

func (x *catalogAddClient) Send(m *AddApplicationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *catalogAddClient) CloseAndRecv() (*grpc_catalog_common_go.OpResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(grpc_catalog_common_go.OpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogClient) Download(ctx context.Context, in *DownloadApplicationRequest, opts ...grpc.CallOption) (Catalog_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Catalog_serviceDesc.Streams[1], "/catalog.Catalog/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Catalog_DownloadClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type catalogDownloadClient struct {
	grpc.ClientStream
}

func (x *catalogDownloadClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatalogServer is the server API for Catalog service.
type CatalogServer interface {
	// Add a new application in the catalog
	Add(Catalog_AddServer) error
	// Download an application from catalog
	Download(*DownloadApplicationRequest, Catalog_DownloadServer) error
}

// UnimplementedCatalogServer can be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (*UnimplementedCatalogServer) Add(Catalog_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCatalogServer) Download(*DownloadApplicationRequest, Catalog_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterCatalogServer(s *grpc.Server, srv CatalogServer) {
	s.RegisterService(&_Catalog_serviceDesc, srv)
}

func _Catalog_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CatalogServer).Add(&catalogAddServer{stream})
}

type Catalog_AddServer interface {
	SendAndClose(*grpc_catalog_common_go.OpResponse) error
	Recv() (*AddApplicationRequest, error)
	grpc.ServerStream
}

type catalogAddServer struct {
	grpc.ServerStream
}

func (x *catalogAddServer) SendAndClose(m *grpc_catalog_common_go.OpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *catalogAddServer) Recv() (*AddApplicationRequest, error) {
	m := new(AddApplicationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Catalog_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadApplicationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServer).Download(m, &catalogDownloadServer{stream})
}

type Catalog_DownloadServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type catalogDownloadServer struct {
	grpc.ServerStream
}

func (x *catalogDownloadServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _Catalog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _Catalog_Add_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Catalog_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "catalog/services.proto",
}
