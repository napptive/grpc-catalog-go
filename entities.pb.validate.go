// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: catalog/entities.proto

package grpc_catalog_go

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on FileInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileInfoMultiError, or nil
// if none found.
func (m *FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		err := FileInfoValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Data

	if len(errors) > 0 {
		return FileInfoMultiError(errors)
	}
	return nil
}

// FileInfoMultiError is an error wrapping multiple validation errors returned
// by FileInfo.ValidateAll() if the designated constraints aren't met.
type FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoMultiError) AllErrors() []error { return m }

// FileInfoValidationError is the validation error returned by
// FileInfo.Validate if the designated constraints aren't met.
type FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoValidationError) ErrorName() string { return "FileInfoValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoValidationError{}

// Validate checks the field values on AddApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddApplicationRequestMultiError, or nil if none found.
func (m *AddApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := AddApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddApplicationRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddApplicationRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddApplicationRequestValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Private

	if len(errors) > 0 {
		return AddApplicationRequestMultiError(errors)
	}
	return nil
}

// AddApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by AddApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type AddApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddApplicationRequestMultiError) AllErrors() []error { return m }

// AddApplicationRequestValidationError is the validation error returned by
// AddApplicationRequest.Validate if the designated constraints aren't met.
type AddApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddApplicationRequestValidationError) ErrorName() string {
	return "AddApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddApplicationRequestValidationError{}

// Validate checks the field values on DownloadApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadApplicationRequestMultiError, or nil if none found.
func (m *DownloadApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := DownloadApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Compressed

	if len(errors) > 0 {
		return DownloadApplicationRequestMultiError(errors)
	}
	return nil
}

// DownloadApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by DownloadApplicationRequest.ValidateAll() if
// the designated constraints aren't met.
type DownloadApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadApplicationRequestMultiError) AllErrors() []error { return m }

// DownloadApplicationRequestValidationError is the validation error returned
// by DownloadApplicationRequest.Validate if the designated constraints aren't met.
type DownloadApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadApplicationRequestValidationError) ErrorName() string {
	return "DownloadApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadApplicationRequestValidationError{}

// Validate checks the field values on RemoveApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveApplicationRequestMultiError, or nil if none found.
func (m *RemoveApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := RemoveApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveApplicationRequestMultiError(errors)
	}
	return nil
}

// RemoveApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveApplicationRequestMultiError) AllErrors() []error { return m }

// RemoveApplicationRequestValidationError is the validation error returned by
// RemoveApplicationRequest.Validate if the designated constraints aren't met.
type RemoveApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveApplicationRequestValidationError) ErrorName() string {
	return "RemoveApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveApplicationRequestValidationError{}

// Validate checks the field values on InfoApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InfoApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InfoApplicationRequestMultiError, or nil if none found.
func (m *InfoApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := InfoApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InfoApplicationRequestMultiError(errors)
	}
	return nil
}

// InfoApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by InfoApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type InfoApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoApplicationRequestMultiError) AllErrors() []error { return m }

// InfoApplicationRequestValidationError is the validation error returned by
// InfoApplicationRequest.Validate if the designated constraints aren't met.
type InfoApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoApplicationRequestValidationError) ErrorName() string {
	return "InfoApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InfoApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoApplicationRequestValidationError{}

// Validate checks the field values on InfoApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InfoApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InfoApplicationResponseMultiError, or nil if none found.
func (m *InfoApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ApplicationName

	// no validation rules for Tag

	// no validation rules for MetadataFile

	// no validation rules for ReadmeFile

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoApplicationResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoApplicationResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoApplicationResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Private

	if len(errors) > 0 {
		return InfoApplicationResponseMultiError(errors)
	}
	return nil
}

// InfoApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by InfoApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type InfoApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoApplicationResponseMultiError) AllErrors() []error { return m }

// InfoApplicationResponseValidationError is the validation error returned by
// InfoApplicationResponse.Validate if the designated constraints aren't met.
type InfoApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoApplicationResponseValidationError) ErrorName() string {
	return "InfoApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InfoApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoApplicationResponseValidationError{}

// Validate checks the field values on ApplicationLogoList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationLogoList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationLogoList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationLogoListMultiError, or nil if none found.
func (m *ApplicationLogoList) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationLogoList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationLogoListValidationError{
						field:  fmt.Sprintf("Logo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationLogoListValidationError{
						field:  fmt.Sprintf("Logo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationLogoListValidationError{
					field:  fmt.Sprintf("Logo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationLogoListMultiError(errors)
	}
	return nil
}

// ApplicationLogoListMultiError is an error wrapping multiple validation
// errors returned by ApplicationLogoList.ValidateAll() if the designated
// constraints aren't met.
type ApplicationLogoListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationLogoListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationLogoListMultiError) AllErrors() []error { return m }

// ApplicationLogoListValidationError is the validation error returned by
// ApplicationLogoList.Validate if the designated constraints aren't met.
type ApplicationLogoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationLogoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationLogoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationLogoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationLogoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationLogoListValidationError) ErrorName() string {
	return "ApplicationLogoListValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationLogoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationLogoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationLogoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationLogoListValidationError{}

// Validate checks the field values on ApplicationSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationSummaryMultiError, or nil if none found.
func (m *ApplicationSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ApplicationName

	// no validation rules for TagMetadataName

	for key, val := range m.GetSummaryApplicationLogo() {
		_ = val

		// no validation rules for SummaryApplicationLogo[key]

		if all {
			switch v := interface{}(val).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationSummaryValidationError{
						field:  fmt.Sprintf("SummaryApplicationLogo[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationSummaryValidationError{
						field:  fmt.Sprintf("SummaryApplicationLogo[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationSummaryValidationError{
					field:  fmt.Sprintf("SummaryApplicationLogo[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Private

	if len(errors) > 0 {
		return ApplicationSummaryMultiError(errors)
	}
	return nil
}

// ApplicationSummaryMultiError is an error wrapping multiple validation errors
// returned by ApplicationSummary.ValidateAll() if the designated constraints
// aren't met.
type ApplicationSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationSummaryMultiError) AllErrors() []error { return m }

// ApplicationSummaryValidationError is the validation error returned by
// ApplicationSummary.Validate if the designated constraints aren't met.
type ApplicationSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSummaryValidationError) ErrorName() string {
	return "ApplicationSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSummaryValidationError{}

// Validate checks the field values on ApplicationList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationListMultiError, or nil if none found.
func (m *ApplicationList) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationListValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationListValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationListValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationListMultiError(errors)
	}
	return nil
}

// ApplicationListMultiError is an error wrapping multiple validation errors
// returned by ApplicationList.ValidateAll() if the designated constraints
// aren't met.
type ApplicationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationListMultiError) AllErrors() []error { return m }

// ApplicationListValidationError is the validation error returned by
// ApplicationList.Validate if the designated constraints aren't met.
type ApplicationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationListValidationError) ErrorName() string { return "ApplicationListValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationListValidationError{}

// Validate checks the field values on KubernetesEntities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubernetesEntities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesEntities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesEntitiesMultiError, or nil if none found.
func (m *KubernetesEntities) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesEntities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	// no validation rules for Name

	if len(errors) > 0 {
		return KubernetesEntitiesMultiError(errors)
	}
	return nil
}

// KubernetesEntitiesMultiError is an error wrapping multiple validation errors
// returned by KubernetesEntities.ValidateAll() if the designated constraints
// aren't met.
type KubernetesEntitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesEntitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesEntitiesMultiError) AllErrors() []error { return m }

// KubernetesEntitiesValidationError is the validation error returned by
// KubernetesEntities.Validate if the designated constraints aren't met.
type KubernetesEntitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesEntitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesEntitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesEntitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesEntitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesEntitiesValidationError) ErrorName() string {
	return "KubernetesEntitiesValidationError"
}

// Error satisfies the builtin error interface
func (e KubernetesEntitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesEntities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesEntitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesEntitiesValidationError{}

// Validate checks the field values on ApplicationRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationRequirement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationRequirementMultiError, or nil if none found.
func (m *ApplicationRequirement) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationRequirement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetK8S() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationRequirementValidationError{
						field:  fmt.Sprintf("K8S[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationRequirementValidationError{
						field:  fmt.Sprintf("K8S[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationRequirementValidationError{
					field:  fmt.Sprintf("K8S[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationRequirementMultiError(errors)
	}
	return nil
}

// ApplicationRequirementMultiError is an error wrapping multiple validation
// errors returned by ApplicationRequirement.ValidateAll() if the designated
// constraints aren't met.
type ApplicationRequirementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationRequirementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationRequirementMultiError) AllErrors() []error { return m }

// ApplicationRequirementValidationError is the validation error returned by
// ApplicationRequirement.Validate if the designated constraints aren't met.
type ApplicationRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationRequirementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationRequirementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationRequirementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationRequirementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationRequirementValidationError) ErrorName() string {
	return "ApplicationRequirementValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationRequirementValidationError{}

// Validate checks the field values on ApplicationLogo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationLogo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationLogo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationLogoMultiError, or nil if none found.
func (m *ApplicationLogo) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationLogo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Src

	// no validation rules for Type

	// no validation rules for Size

	if len(errors) > 0 {
		return ApplicationLogoMultiError(errors)
	}
	return nil
}

// ApplicationLogoMultiError is an error wrapping multiple validation errors
// returned by ApplicationLogo.ValidateAll() if the designated constraints
// aren't met.
type ApplicationLogoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationLogoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationLogoMultiError) AllErrors() []error { return m }

// ApplicationLogoValidationError is the validation error returned by
// ApplicationLogo.Validate if the designated constraints aren't met.
type ApplicationLogoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationLogoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationLogoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationLogoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationLogoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationLogoValidationError) ErrorName() string { return "ApplicationLogoValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationLogoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationLogo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationLogoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationLogoValidationError{}

// Validate checks the field values on ApplicationMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationMetadataMultiError, or nil if none found.
func (m *ApplicationMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Description

	// no validation rules for License

	// no validation rules for Url

	// no validation rules for Doc

	if all {
		switch v := interface{}(m.GetRequires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationMetadataValidationError{
					field:  "Requires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationMetadataValidationError{
					field:  "Requires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationMetadataValidationError{
				field:  "Requires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLogo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationMetadataValidationError{
						field:  fmt.Sprintf("Logo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationMetadataValidationError{
						field:  fmt.Sprintf("Logo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationMetadataValidationError{
					field:  fmt.Sprintf("Logo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationMetadataMultiError(errors)
	}
	return nil
}

// ApplicationMetadataMultiError is an error wrapping multiple validation
// errors returned by ApplicationMetadata.ValidateAll() if the designated
// constraints aren't met.
type ApplicationMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationMetadataMultiError) AllErrors() []error { return m }

// ApplicationMetadataValidationError is the validation error returned by
// ApplicationMetadata.Validate if the designated constraints aren't met.
type ApplicationMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationMetadataValidationError) ErrorName() string {
	return "ApplicationMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationMetadataValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsRequestMultiError, or nil if none found.
func (m *ListApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ListApplicationsRequestMultiError(errors)
	}
	return nil
}

// ListApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRequestMultiError) AllErrors() []error { return m }

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on SummaryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SummaryResponseMultiError, or nil if none found.
func (m *SummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumNamespaces

	// no validation rules for NumApplications

	// no validation rules for NumTags

	if len(errors) > 0 {
		return SummaryResponseMultiError(errors)
	}
	return nil
}

// SummaryResponseMultiError is an error wrapping multiple validation errors
// returned by SummaryResponse.ValidateAll() if the designated constraints
// aren't met.
type SummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SummaryResponseMultiError) AllErrors() []error { return m }

// SummaryResponseValidationError is the validation error returned by
// SummaryResponse.Validate if the designated constraints aren't met.
type SummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SummaryResponseValidationError) ErrorName() string { return "SummaryResponseValidationError" }

// Error satisfies the builtin error interface
func (e SummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SummaryResponseValidationError{}

// Validate checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNamespaceRequestMultiError, or nil if none found.
func (m *DeleteNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteNamespaceRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNamespaceRequestMultiError(errors)
	}
	return nil
}

// DeleteNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceRequestMultiError) AllErrors() []error { return m }

// DeleteNamespaceRequestValidationError is the validation error returned by
// DeleteNamespaceRequest.Validate if the designated constraints aren't met.
type DeleteNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceRequestValidationError) ErrorName() string {
	return "DeleteNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceRequestValidationError{}

// Validate checks the field values on ApplicationInstanceConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApplicationInstanceConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationInstanceConfiguration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApplicationInstanceConfigurationMultiError, or nil if none found.
func (m *ApplicationInstanceConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationInstanceConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationDefaultName

	// no validation rules for SpecComponentsRaw

	if len(errors) > 0 {
		return ApplicationInstanceConfigurationMultiError(errors)
	}
	return nil
}

// ApplicationInstanceConfigurationMultiError is an error wrapping multiple
// validation errors returned by
// ApplicationInstanceConfiguration.ValidateAll() if the designated
// constraints aren't met.
type ApplicationInstanceConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationInstanceConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationInstanceConfigurationMultiError) AllErrors() []error { return m }

// ApplicationInstanceConfigurationValidationError is the validation error
// returned by ApplicationInstanceConfiguration.Validate if the designated
// constraints aren't met.
type ApplicationInstanceConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationInstanceConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationInstanceConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationInstanceConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationInstanceConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationInstanceConfigurationValidationError) ErrorName() string {
	return "ApplicationInstanceConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationInstanceConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationInstanceConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationInstanceConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationInstanceConfigurationValidationError{}

// Validate checks the field values on DeployApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployApplicationRequestMultiError, or nil if none found.
func (m *DeployApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := DeployApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTargetEnvironmentQualifiedName()) < 1 {
		err := DeployApplicationRequestValidationError{
			field:  "TargetEnvironmentQualifiedName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTargetPlaygroundApiUrl()) < 1 {
		err := DeployApplicationRequestValidationError{
			field:  "TargetPlaygroundApiUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for key, val := range m.GetInstanceConfiguration() {
		_ = val

		// no validation rules for InstanceConfiguration[key]

		if all {
			switch v := interface{}(val).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeployApplicationRequestValidationError{
						field:  fmt.Sprintf("InstanceConfiguration[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeployApplicationRequestValidationError{
						field:  fmt.Sprintf("InstanceConfiguration[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeployApplicationRequestValidationError{
					field:  fmt.Sprintf("InstanceConfiguration[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeployApplicationRequestMultiError(errors)
	}
	return nil
}

// DeployApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DeployApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeployApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployApplicationRequestMultiError) AllErrors() []error { return m }

// DeployApplicationRequestValidationError is the validation error returned by
// DeployApplicationRequest.Validate if the designated constraints aren't met.
type DeployApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployApplicationRequestValidationError) ErrorName() string {
	return "DeployApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployApplicationRequestValidationError{}

// Validate checks the field values on GetConfigurationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigurationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigurationRequestMultiError, or nil if none found.
func (m *GetConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := GetConfigurationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConfigurationRequestMultiError(errors)
	}
	return nil
}

// GetConfigurationRequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigurationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigurationRequestMultiError) AllErrors() []error { return m }

// GetConfigurationRequestValidationError is the validation error returned by
// GetConfigurationRequest.Validate if the designated constraints aren't met.
type GetConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigurationRequestValidationError) ErrorName() string {
	return "GetConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigurationRequestValidationError{}

// Validate checks the field values on GetConfigurationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigurationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigurationResponseMultiError, or nil if none found.
func (m *GetConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsApplication

	// no validation rules for ApplicationDefaultName

	// no validation rules for SpecComponentsRaw

	if len(errors) > 0 {
		return GetConfigurationResponseMultiError(errors)
	}
	return nil
}

// GetConfigurationResponseMultiError is an error wrapping multiple validation
// errors returned by GetConfigurationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigurationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigurationResponseMultiError) AllErrors() []error { return m }

// GetConfigurationResponseValidationError is the validation error returned by
// GetConfigurationResponse.Validate if the designated constraints aren't met.
type GetConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigurationResponseValidationError) ErrorName() string {
	return "GetConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigurationResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ApplicationName

	// no validation rules for Private

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}
	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}
